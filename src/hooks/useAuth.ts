import { useState, useEffect } from 'react';
import { User } from '../types/auth';
import { authService } from '../services/authService';

/**
 * useAuth
 * 
 * Hook personalizado para manejar la autenticaci√≥n de usuarios en Plena Studio.
 * Proporciona el usuario actual, estado de carga, funciones para login y logout, y un flag de autenticaci√≥n.
 * 
 * @returns {Object} Objeto con:
 *  - user: Usuario autenticado o null.
 *  - loading: booleano que indica si est√° cargando el estado de autenticaci√≥n.
 *  - login: funci√≥n para iniciar sesi√≥n.
 *      @param {Object} credentials - Credenciales de inicio de sesi√≥n.
 *      @param {string} credentials.email - Correo electr√≥nico.
 *      @param {string} credentials.password - Contrase√±a.
 *      @returns {Promise<any>} Resultado del login.
 *  - logout: funci√≥n para cerrar sesi√≥n.
 *  - isAuthenticated: booleano que indica si hay usuario autenticado.
 */
export function useAuth() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // Al montar, obtiene el usuario actual y actualiza el estado
  useEffect(() => {
    const currentUser = authService.getCurrentUser();
    setUser(currentUser);
    setLoading(false);
  }, []);
  /**
   * Inicia sesi√≥n con las credenciales proporcionadas.
   * @param {Object} credentials - Credenciales de inicio de sesi√≥n.
   * @param {string} credentials.email - Correo electr√≥nico.
   * @param {string} credentials.password - Contrase√±a.
   * @returns {Promise<any>} Resultado del login.
   */  const login = async (credentials: { email: string; password: string }) => {
    const result = await authService.login(credentials);
    setUser(result.user);
    
    // Disparar evento personalizado para notificar cambio de autenticaci√≥n
    // El carrito se sincronizar√° en CartContext
    window.dispatchEvent(new CustomEvent('authStateChanged', { 
      detail: { user: result.user } 
    }));
    
    return result;
  };  /**
   * Cierra la sesi√≥n del usuario actual.
   */
  const logout = async () => {
    console.log("üî¥ Ejecutando logout...");
    
    try {
      // Ejecutar logout as√≠ncrono para guardar carrito en BD
      await authService.logout();
      setUser(null);
      
      // Disparar evento personalizado para notificar cambio de autenticaci√≥n
      window.dispatchEvent(new CustomEvent('authStateChanged', { 
        detail: { user: null } 
      }));
      
      console.log("üî¥ Logout completado exitosamente");
    } catch (error) {
      console.error("‚ùå Error durante logout:", error);
      // A√∫n as√≠ limpiar el estado local en caso de error
      setUser(null);
      window.dispatchEvent(new CustomEvent('authStateChanged', { 
        detail: { user: null } 
      }));
    }
  };

  return {
    user,
    loading,
    login,
    logout,
    isAuthenticated: !!user
  };
}