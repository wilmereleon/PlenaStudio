@startuml
' Permite mezclar clases y componentes en el mismo diagrama
allowmixing

' Definición del componente del API Backend con sus clases internas (Controladores y Servicios)
component "API Backend\n(Node.js, Express)" as API {
  ' Declaración de clases internas para el API
  class UserController {
    +login()
    +register()
    +getUserProfile()
  }
  class ProductController {
    +listProducts()
    +getProductDetail()
  }
  class OrderController {
    +createOrder()
    +getOrderHistory()
  }
  
  class UserService {
    +authenticate()
    +createUser()
  }
  class ProductService {
    +fetchProducts()
    +updateStock()
  }
  class OrderService {
    +processOrder()
    +calculateTotals()
  }
  
  ' Relaciones internas (las flechas muestran colaboración o dependencia)
  UserController --> UserService : usa
  ProductController --> ProductService : usa
  OrderController --> OrderService : usa
}

' Componente para el Frontend
component "Frontend\n(React)" as FE {
  ' Declaración de clases internas para representar componentes o vistas
  class HomePage {
    +render()
    +showBanners()
  }
  class ProductPage {
    +render()
    +displayProductDetails()
  }
  class CartPage {
    +render()
    +updateCart()
  }
  class RegisterForm {
    +handleChange()
    +handleSubmit()
    +limpiarFormulario()
    +render()
  }
  class Login {
    +render()
  }
  class LoginForm {
    +handleChange()
    +handleSubmit()
    +render()
  }
  class ShoppingCart {
    +cartItems
    +updateQuantity()
    +removeItem()
    +subtotal
    +total
    +applyDiscount()
    +checkout()
    +render()
  }
  class CartContext {
    +cartItems
    +addItem()
    +updateQuantity()
    +removeItem()
    +subtotal
    +total
    +applyDiscount()
    +checkout()
  }
  class CartProvider {
    +children
    +render()
  }
  class useCart
  class useAuth
  class AuthService
  class RegisterFormTest

  ' Relaciones internas principales
  HomePage --> ProductPage : navega a
  ProductPage --> CartPage : añade producto
  RegisterFormTest ..> RegisterForm : testea
  ShoppingCart --> CartContext
  CartProvider --> CartContext
  LoginForm --> useAuth
  useAuth --> AuthService
  CartPage --> ShoppingCart
}

' Componente para la Base de Datos
database "MySQL Database" as DB

' Relación entre el API y la Base de Datos
UserService --> DB : Consulta/Actualización
ProductService --> DB : Consulta/Actualización
OrderService --> DB : Consulta/Actualización

' Relación entre el Frontend y el API
FE --> API : HTTP / REST

@enduml