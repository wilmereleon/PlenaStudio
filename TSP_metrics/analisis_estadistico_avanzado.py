#!/usr/bin/env python3
"""
An√°lisis Estad√≠stico Avanzado TSPi - Porcentajes y M√©tricas Detalladas
Incluye: Porcentajes semanales, an√°lisis por iteraci√≥n, media/mediana comparativa
Proyecto: Plena Studio
"""

import statistics
import json
from datetime import datetime

def datos_presupuesto_semanal():
    """Datos del presupuesto semanal con detalles completos"""
    
    semanas_data = [
        {
            "semana": 1,
            "fecha": "22/05/2025",
            "planificado": 24.0,
            "real": 24.0,
            "iteracion": 1,
            "fase_principal": "PLAN",
            "descripcion": "Inicio controlado - Reconocimiento y planificaci√≥n"
        },
        {
            "semana": 2,
            "fecha": "29/05/2025", 
            "planificado": 24.0,
            "real": 18.0,
            "iteracion": 1,
            "fase_principal": "HLD",
            "descripcion": "High Level Design - Diagramas UML"
        },
        {
            "semana": 3,
            "fecha": "05/06/2025",
            "planificado": 24.0,
            "real": 72.0,
            "iteracion": 1,
            "fase_principal": "HLDINSP",
            "descripcion": "Crisis de alcance - Prototipos y validaci√≥n"
        },
        {
            "semana": 4,
            "fecha": "12/06/2025",
            "planificado": 68.0,
            "real": 96.0,
            "iteracion": 2,
            "fase_principal": "IT",
            "descripcion": "Integration Testing - Implementaci√≥n intensiva"
        },
        {
            "semana": 5,
            "fecha": "19/06/2025",
            "planificado": 68.0,
            "real": 96.0,
            "iteracion": 2,
            "fase_principal": "PM/ST",
            "descripcion": "Project Management y System Testing"
        },
        {
            "semana": 6,
            "fecha": "26/06/2025",
            "planificado": 68.0,
            "real": 30.0,
            "iteracion": 2,
            "fase_principal": "DOC",
            "descripcion": "Documentaci√≥n y finalizaci√≥n optimizada"
        }
    ]
    
    return semanas_data

def datos_tareas_por_iteracion():
    """Datos de tareas agrupadas por iteraci√≥n con detalles"""
    
    iteraciones_data = {
        1: {
            "tareas_totales": 25,
            "horas_planificadas": 102.0,
            "horas_reales": 34.6,
            "fases": ["PLAN", "HLD", "HLDINSP", "DOC", "IT"],
            "semanas": [1, 2, 3],
            "enfoque": "Dise√±o y planificaci√≥n",
            "complejidad": "Media"
        },
        2: {
            "tareas_totales": 6,
            "horas_planificadas": 2633.0,
            "horas_reales": 13.2,
            "fases": ["PM", "IT", "ST"],
            "semanas": [4, 5, 6],
            "enfoque": "Implementaci√≥n y testing",
            "complejidad": "Alta (sobrestimada)"
        }
    }
    
    return iteraciones_data

def calcular_estadisticas_semanales(semanas_data):
    """Calcula estad√≠sticas detalladas por semana"""
    
    total_planificado = sum(s['planificado'] for s in semanas_data)
    total_real = sum(s['real'] for s in semanas_data)
    
    estadisticas_semanales = []
    
    for semana in semanas_data:
        # C√°lculos b√°sicos
        diferencia = semana['real'] - semana['planificado']
        ratio_eficiencia = semana['real'] / semana['planificado']
        
        # Porcentajes
        pct_planificado_total = (semana['planificado'] / total_planificado) * 100
        pct_real_total = (semana['real'] / total_real) * 100
        pct_diferencia = ((semana['real'] / semana['planificado']) - 1) * 100
        
        # Estado
        if ratio_eficiencia <= 1.0:
            estado = "‚úÖ Dentro/Ahorro"
            color = "verde"
        elif ratio_eficiencia <= 1.5:
            estado = "üü° Sobrecarga Moderada"
            color = "amarillo"
        else:
            estado = "üî¥ Sobrecarga Cr√≠tica"
            color = "rojo"
        
        estadisticas = {
            'semana': semana['semana'],
            'fecha': semana['fecha'],
            'planificado': semana['planificado'],
            'real': semana['real'],
            'diferencia': diferencia,
            'ratio_eficiencia': ratio_eficiencia,
            'pct_planificado_total': pct_planificado_total,
            'pct_real_total': pct_real_total,
            'pct_diferencia': pct_diferencia,
            'estado': estado,
            'color': color,
            'iteracion': semana['iteracion'],
            'fase_principal': semana['fase_principal'],
            'descripcion': semana['descripcion']
        }
        
        estadisticas_semanales.append(estadisticas)
    
    return estadisticas_semanales

def calcular_estadisticas_por_iteracion(semanas_data, iteraciones_data):
    """Calcula estad√≠sticas detalladas por iteraci√≥n"""
    
    estadisticas_iteraciones = []
    
    for iter_num, iter_info in iteraciones_data.items():
        # Filtrar semanas de esta iteraci√≥n
        semanas_iter = [s for s in semanas_data if s['iteracion'] == iter_num]
        
        # Sumar horas de semanas
        planificado_semanas = sum(s['planificado'] for s in semanas_iter)
        real_semanas = sum(s['real'] for s in semanas_iter)
        
        # Estad√≠sticas de la iteraci√≥n
        diferencia_semanas = real_semanas - planificado_semanas
        eficiencia_semanas = real_semanas / planificado_semanas if planificado_semanas > 0 else 0
        
        # Estad√≠sticas de tareas
        eficiencia_tareas = iter_info['horas_reales'] / iter_info['horas_planificadas'] if iter_info['horas_planificadas'] > 0 else 0
        diferencia_tareas = iter_info['horas_reales'] - iter_info['horas_planificadas']
        
        estadisticas = {
            'iteracion': iter_num,
            'semanas_incluidas': [s['semana'] for s in semanas_iter],
            'duracion_semanas': len(semanas_iter),
            
            # Datos de semanas (presupuesto)
            'presupuesto_planificado': planificado_semanas,
            'presupuesto_real': real_semanas,
            'presupuesto_diferencia': diferencia_semanas,
            'presupuesto_eficiencia': eficiencia_semanas,
            'presupuesto_pct': ((real_semanas / planificado_semanas) - 1) * 100 if planificado_semanas > 0 else 0,
            
            # Datos de tareas (Form TASK)
            'tareas_totales': iter_info['tareas_totales'],
            'tareas_planificadas': iter_info['horas_planificadas'],
            'tareas_reales': iter_info['horas_reales'],
            'tareas_diferencia': diferencia_tareas,
            'tareas_eficiencia': eficiencia_tareas,
            'tareas_pct': ((iter_info['horas_reales'] / iter_info['horas_planificadas']) - 1) * 100 if iter_info['horas_planificadas'] > 0 else 0,
            
            # Informaci√≥n adicional
            'fases': iter_info['fases'],
            'enfoque': iter_info['enfoque'],
            'complejidad': iter_info['complejidad']
        }
        
        estadisticas_iteraciones.append(estadisticas)
    
    return estadisticas_iteraciones

def calcular_metricas_comparativas(semanas_data):
    """Calcula m√©tricas estad√≠sticas comparativas"""
    
    planificados = [s['planificado'] for s in semanas_data]
    reales = [s['real'] for s in semanas_data]
    diferencias = [s['real'] - s['planificado'] for s in semanas_data]
    ratios = [s['real'] / s['planificado'] for s in semanas_data]
    
    metricas = {
        'planificado': {
            'total': sum(planificados),
            'media': statistics.mean(planificados),
            'mediana': statistics.median(planificados),
            'desv_estandar': statistics.stdev(planificados) if len(planificados) > 1 else 0,
            'minimo': min(planificados),
            'maximo': max(planificados),
            'rango': max(planificados) - min(planificados)
        },
        'real': {
            'total': sum(reales),
            'media': statistics.mean(reales),
            'mediana': statistics.median(reales),
            'desv_estandar': statistics.stdev(reales) if len(reales) > 1 else 0,
            'minimo': min(reales),
            'maximo': max(reales),
            'rango': max(reales) - min(reales)
        },
        'diferencias': {
            'total': sum(diferencias),
            'media': statistics.mean(diferencias),
            'mediana': statistics.median(diferencias),
            'desv_estandar': statistics.stdev(diferencias) if len(diferencias) > 1 else 0,
            'minimo': min(diferencias),
            'maximo': max(diferencias)
        },
        'ratios': {
            'media': statistics.mean(ratios),
            'mediana': statistics.median(ratios),
            'desv_estandar': statistics.stdev(ratios) if len(ratios) > 1 else 0,
            'minimo': min(ratios),
            'maximo': max(ratios)
        },
        'globales': {
            'eficiencia_total': sum(reales) / sum(planificados) * 100,
            'ahorro_total': sum(planificados) - sum(reales),
            'ahorro_porcentual': ((sum(planificados) - sum(reales)) / sum(planificados)) * 100,
            'semanas_ahorro': len([r for r in ratios if r <= 1.0]),
            'semanas_sobrecarga': len([r for r in ratios if r > 1.0])
        }
    }
    
    return metricas

def generar_reporte_detallado():
    """Genera el reporte completo con todas las m√©tricas"""
    
    print("üöÄ Iniciando an√°lisis estad√≠stico avanzado TSPi...")
    print("=" * 100)
    
    # Cargar datos
    semanas_data = datos_presupuesto_semanal()
    iteraciones_data = datos_tareas_por_iteracion()
    
    # Calcular estad√≠sticas
    stats_semanales = calcular_estadisticas_semanales(semanas_data)
    stats_iteraciones = calcular_estadisticas_por_iteracion(semanas_data, iteraciones_data)
    metricas_comp = calcular_metricas_comparativas(semanas_data)
    
    # ========================================
    # REPORTE PRINCIPAL
    # ========================================
    
    print("üìä AN√ÅLISIS ESTAD√çSTICO AVANZADO TSPi - PLENA STUDIO")
    print("=" * 100)
    print(f"üìÖ Per√≠odo: {semanas_data[0]['fecha']} - {semanas_data[-1]['fecha']}")
    print(f"üî¢ Total semanas: {len(semanas_data)}")
    print(f"üîÑ Iteraciones: {len(iteraciones_data)}")
    print(f"üìã Total tareas analizadas: {sum(iter_info['tareas_totales'] for iter_info in iteraciones_data.values())}")
    
    # ========================================
    # AN√ÅLISIS SEMANAL DETALLADO
    # ========================================
    
    print("\\n" + "=" * 100)
    print("üìÖ AN√ÅLISIS SEMANAL DETALLADO CON PORCENTAJES")
    print("=" * 100)
    
    print(f"{'Sem':<3} {'Fecha':<10} {'Plan':<6} {'Real':<6} {'Diff':<6} {'Ratio':<6} {'%Plan':<6} {'%Real':<6} {'%Diff':<7} {'Estado':<20} {'Fase':<10}")
    print("-" * 95)
    
    for stat in stats_semanales:
        print(f"{stat['semana']:<3} "
              f"{stat['fecha']:<10} "
              f"{stat['planificado']:>5.1f}h "
              f"{stat['real']:>5.1f}h "
              f"{stat['diferencia']:>+5.1f}h "
              f"{stat['ratio_eficiencia']:>5.2f} "
              f"{stat['pct_planificado_total']:>5.1f}% "
              f"{stat['pct_real_total']:>5.1f}% "
              f"{stat['pct_diferencia']:>+6.0f}% "
              f"{stat['estado']:<20} "
              f"{stat['fase_principal']:<10}")
    
    # ========================================
    # M√âTRICAS ESTAD√çSTICAS COMPARATIVAS
    # ========================================
    
    print("\\n" + "=" * 100)
    print("üìä M√âTRICAS ESTAD√çSTICAS COMPARATIVAS")
    print("=" * 100)
    
    print("üìã HORAS PLANIFICADAS:")
    print(f"  ‚Ä¢ Total: {metricas_comp['planificado']['total']:.1f}h")
    print(f"  ‚Ä¢ Media: {metricas_comp['planificado']['media']:.1f}h")
    print(f"  ‚Ä¢ Mediana: {metricas_comp['planificado']['mediana']:.1f}h")
    print(f"  ‚Ä¢ Desv. Est√°ndar: {metricas_comp['planificado']['desv_estandar']:.1f}h")
    print(f"  ‚Ä¢ Rango: {metricas_comp['planificado']['minimo']:.1f}h - {metricas_comp['planificado']['maximo']:.1f}h")
    
    print("\\n‚è±Ô∏è HORAS REALES:")
    print(f"  ‚Ä¢ Total: {metricas_comp['real']['total']:.1f}h")
    print(f"  ‚Ä¢ Media: {metricas_comp['real']['media']:.1f}h") 
    print(f"  ‚Ä¢ Mediana: {metricas_comp['real']['mediana']:.1f}h")
    print(f"  ‚Ä¢ Desv. Est√°ndar: {metricas_comp['real']['desv_estandar']:.1f}h")
    print(f"  ‚Ä¢ Rango: {metricas_comp['real']['minimo']:.1f}h - {metricas_comp['real']['maximo']:.1f}h")
    
    print("\\nüîÑ DIFERENCIAS:")
    print(f"  ‚Ä¢ Total: {metricas_comp['diferencias']['total']:+.1f}h")
    print(f"  ‚Ä¢ Media: {metricas_comp['diferencias']['media']:+.1f}h")
    print(f"  ‚Ä¢ Mediana: {metricas_comp['diferencias']['mediana']:+.1f}h")
    print(f"  ‚Ä¢ Desv. Est√°ndar: {metricas_comp['diferencias']['desv_estandar']:.1f}h")
    print(f"  ‚Ä¢ Rango: {metricas_comp['diferencias']['minimo']:+.1f}h a {metricas_comp['diferencias']['maximo']:+.1f}h")
    
    print("\\nüéØ RATIOS DE EFICIENCIA:")
    print(f"  ‚Ä¢ Media: {metricas_comp['ratios']['media']:.3f}")
    print(f"  ‚Ä¢ Mediana: {metricas_comp['ratios']['mediana']:.3f}")
    print(f"  ‚Ä¢ Desv. Est√°ndar: {metricas_comp['ratios']['desv_estandar']:.3f}")
    print(f"  ‚Ä¢ Rango: {metricas_comp['ratios']['minimo']:.3f} - {metricas_comp['ratios']['maximo']:.3f}")
    
    print("\\nüåê M√âTRICAS GLOBALES:")
    print(f"  ‚Ä¢ Eficiencia Total: {metricas_comp['globales']['eficiencia_total']:.1f}%")
    print(f"  ‚Ä¢ Ahorro Total: {metricas_comp['globales']['ahorro_total']:+.1f}h")
    print(f"  ‚Ä¢ Ahorro Porcentual: {metricas_comp['globales']['ahorro_porcentual']:+.1f}%")
    print(f"  ‚Ä¢ Semanas con Ahorro: {metricas_comp['globales']['semanas_ahorro']}/{len(semanas_data)} ({metricas_comp['globales']['semanas_ahorro']/len(semanas_data)*100:.1f}%)")
    print(f"  ‚Ä¢ Semanas con Sobrecarga: {metricas_comp['globales']['semanas_sobrecarga']}/{len(semanas_data)} ({metricas_comp['globales']['semanas_sobrecarga']/len(semanas_data)*100:.1f}%)")
    
    # ========================================
    # AN√ÅLISIS POR ITERACI√ìN
    # ========================================
    
    print("\\n" + "=" * 100)
    print("üîÑ AN√ÅLISIS DETALLADO POR ITERACI√ìN")
    print("=" * 100)
    
    for stat in stats_iteraciones:
        print(f"\\nüîπ ITERACI√ìN {stat['iteracion']} - {stat['enfoque'].upper()}")
        print(f"   üìÖ Semanas: {', '.join(map(str, stat['semanas_incluidas']))} (duraci√≥n: {stat['duracion_semanas']} semanas)")
        print(f"   üéØ Fases: {', '.join(stat['fases'])}")
        print(f"   üìä Complejidad: {stat['complejidad']}")
        
        print("\\n   üìã PRESUPUESTO SEMANAL:")
        print(f"   ‚Ä¢ Plan vs Real: {stat['presupuesto_planificado']:.1f}h ‚Üí {stat['presupuesto_real']:.1f}h ({stat['presupuesto_diferencia']:+.1f}h)")
        print(f"   ‚Ä¢ Eficiencia: {stat['presupuesto_eficiencia']:.3f} ({stat['presupuesto_pct']:+.1f}%)")
        
        print("\\n   üìù TAREAS (FORM TASK):")
        print(f"   ‚Ä¢ Tareas totales: {stat['tareas_totales']}")
        print(f"   ‚Ä¢ Plan vs Real: {stat['tareas_planificadas']:.1f}h ‚Üí {stat['tareas_reales']:.1f}h ({stat['tareas_diferencia']:+.1f}h)")
        print(f"   ‚Ä¢ Eficiencia: {stat['tareas_eficiencia']:.3f} ({stat['tareas_pct']:+.1f}%)")
        
        print("\\n   üîç AN√ÅLISIS COMPARATIVO:")
        discrepancia = abs(stat['presupuesto_eficiencia'] - stat['tareas_eficiencia'])
        print(f"   ‚Ä¢ Discrepancia Presupuesto vs Tareas: {discrepancia:.3f}")
        if discrepancia > 0.1:
            print(f"   ‚Ä¢ ‚ö†Ô∏è ALTA DISCREPANCIA - Diferencia significativa entre estimaciones")
        
        # An√°lisis de consistencia
        if stat['presupuesto_eficiencia'] > 1.0 and stat['tareas_eficiencia'] < 0.1:
            print(f"   ‚Ä¢ üö® PATR√ìN CR√çTICO - Sobrecarga en presupuesto, subestimaci√≥n masiva en tareas")
        elif stat['presupuesto_eficiencia'] < 1.0 and stat['tareas_eficiencia'] < 1.0:
            print(f"   ‚Ä¢ ‚úÖ PATR√ìN CONSISTENTE - Ambos muestran eficiencia")
    
    # ========================================
    # COMPARACI√ìN ENTRE ITERACIONES
    # ========================================
    
    print("\\n" + "=" * 100)
    print("‚öñÔ∏è COMPARACI√ìN ENTRE ITERACIONES")
    print("=" * 100)
    
    if len(stats_iteraciones) >= 2:
        iter1 = stats_iteraciones[0]
        iter2 = stats_iteraciones[1]
        
        print("üìä DIFERENCIAS CLAVE:")
        print(f"‚Ä¢ Duraci√≥n: Iter1 {iter1['duracion_semanas']} sem vs Iter2 {iter2['duracion_semanas']} sem")
        print(f"‚Ä¢ Eficiencia Presupuesto: {iter1['presupuesto_eficiencia']:.3f} vs {iter2['presupuesto_eficiencia']:.3f}")
        print(f"‚Ä¢ Eficiencia Tareas: {iter1['tareas_eficiencia']:.3f} vs {iter2['tareas_eficiencia']:.3f}")
        print(f"‚Ä¢ Tareas por semana: {iter1['tareas_totales']/iter1['duracion_semanas']:.1f} vs {iter2['tareas_totales']/iter2['duracion_semanas']:.1f}")
        
        print("\\nüéØ TENDENCIAS:")
        if iter2['presupuesto_eficiencia'] > iter1['presupuesto_eficiencia']:
            print("‚Ä¢ üìà Incremento en carga de trabajo real (Iter2 > Iter1)")
        else:
            print("‚Ä¢ üìâ Reducci√≥n en carga de trabajo real (Iter2 < Iter1)")
            
        if iter2['tareas_eficiencia'] < iter1['tareas_eficiencia']:
            print("‚Ä¢ ‚ö†Ô∏è Mayor subestimaci√≥n en tareas de Iter2")
        
        # C√°lculo de volatilidad
        volatilidad_presupuesto = abs(iter2['presupuesto_eficiencia'] - iter1['presupuesto_eficiencia'])
        volatilidad_tareas = abs(iter2['tareas_eficiencia'] - iter1['tareas_eficiencia'])
        
        print(f"\\nüìä VOLATILIDAD:")
        print(f"‚Ä¢ Volatilidad Presupuesto: {volatilidad_presupuesto:.3f}")
        print(f"‚Ä¢ Volatilidad Tareas: {volatilidad_tareas:.3f}")
        
        if volatilidad_tareas > 0.2:
            print("‚Ä¢ üö® ALTA VOLATILIDAD en estimaci√≥n de tareas entre iteraciones")
    
    # ========================================
    # CONCLUSIONES Y RECOMENDACIONES
    # ========================================
    
    print("\\n" + "=" * 100)
    print("üèÜ CONCLUSIONES PRINCIPALES")
    print("=" * 100)
    
    print("1. üìä PATR√ìN GENERAL:")
    if metricas_comp['globales']['eficiencia_total'] < 100:
        print(f"   ‚Ä¢ Proyecto ejecutado con {100 - metricas_comp['globales']['eficiencia_total']:.1f}% de eficiencia (ahorro)")
    else:
        print(f"   ‚Ä¢ Proyecto excedi√≥ presupuesto en {metricas_comp['globales']['eficiencia_total'] - 100:.1f}%")
    
    print("\\n2. üéØ PRECISI√ìN DE ESTIMACIONES:")
    cv_planificado = (metricas_comp['planificado']['desv_estandar'] / metricas_comp['planificado']['media']) * 100
    cv_real = (metricas_comp['real']['desv_estandar'] / metricas_comp['real']['media']) * 100
    print(f"   ‚Ä¢ Coeficiente de Variaci√≥n Planificado: {cv_planificado:.1f}%")
    print(f"   ‚Ä¢ Coeficiente de Variaci√≥n Real: {cv_real:.1f}%")
    
    if cv_planificado > cv_real:
        print("   ‚Ä¢ ‚úÖ Mayor consistencia en ejecuci√≥n que en planificaci√≥n")
    else:
        print("   ‚Ä¢ ‚ö†Ô∏è Mayor variabilidad en ejecuci√≥n")
    
    print("\\n3. üîÑ EVOLUCI√ìN ENTRE ITERACIONES:")
    if len(stats_iteraciones) >= 2:
        if stats_iteraciones[1]['presupuesto_eficiencia'] > stats_iteraciones[0]['presupuesto_eficiencia']:
            print("   ‚Ä¢ üìà Incremento de complejidad en Iteraci√≥n 2")
        else:
            print("   ‚Ä¢ üìâ Mayor eficiencia en Iteraci√≥n 2")
    
    print("\\n" + "=" * 100)
    print("‚úÖ An√°lisis estad√≠stico avanzado completado")
    print("üìä Todos los porcentajes, medias y medianas calculados")
    print("üîÑ Comparaci√≥n entre iteraciones incluida")
    print("=" * 100)
    
    return stats_semanales, stats_iteraciones, metricas_comp

if __name__ == "__main__":
    stats_semanales, stats_iteraciones, metricas_comp = generar_reporte_detallado()
